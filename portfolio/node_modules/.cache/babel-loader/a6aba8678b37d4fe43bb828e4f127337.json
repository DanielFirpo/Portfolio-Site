{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DF\\\\Documents\\\\GitHub\\\\Lambda\\\\PortfolioSite\\\\portfolio\\\\src\\\\components\\\\Game.js\";\nimport React, { useEffect, useState } from 'react';\n\nfunction Game() {\n  const [canvas, setCanvas] = useState();\n  const [size, setSize] = useState();\n  let canvasRef = React.createRef();\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    console.log(\"Canvas:\", canvas);\n    resizeCanvas(); //do an initial resize for when it first renders, this function will also be called every time the window is resized too\n  }, [canvasRef]);\n  useEffect(() => {\n    window.addEventListener('resize', resizeCanvas);\n  });\n\n  function resizeCanvas() {\n    if (canvas) {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    }\n  }\n\n  if (canvas) {\n    let c = canvas.getContext(\"2d\");\n    c.fillRect(100, 100, 100, 100);\n    c.font = '30px Arial';\n    let totalOffset = 0;\n\n    for (let i = 0; i < txt.length; i++) {\n      totalOffset += ctx.measureText(txt[i]).width;\n      ctx.fillText(txt[i], window.innerWidth / 2 + totalOffset, window.innerHeight / 2);\n    }\n  }\n\n  return React.createElement(\"canvas\", {\n    ref: canvasRef,\n    id: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/DF/Documents/GitHub/Lambda/PortfolioSite/portfolio/src/components/Game.js"],"names":["React","useEffect","useState","Game","canvas","setCanvas","size","setSize","canvasRef","createRef","current","console","log","resizeCanvas","window","addEventListener","width","innerWidth","height","innerHeight","c","getContext","fillRect","font","totalOffset","i","txt","length","ctx","measureText","fillText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,IAAT,GAAgB;AAEZ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,EAApC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AAEA,MAAIM,SAAS,GAAGR,KAAK,CAACS,SAAN,EAAhB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,SAAS,CAACG,SAAS,CAACE,OAAX,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,MAAvB;AACAS,IAAAA,YAAY,GAHA,CAGG;AAClB,GAJQ,EAIN,CAACL,SAAD,CAJM,CAAT;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACH,GAFQ,CAAT;;AAIA,WAASA,YAAT,GAAwB;AACpB,QAAIT,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACY,KAAP,GAAeF,MAAM,CAACG,UAAtB;AACAb,MAAAA,MAAM,CAACc,MAAP,GAAgBJ,MAAM,CAACK,WAAvB;AACH;AACJ;;AAED,MAAIf,MAAJ,EAAY;AAER,QAAIgB,CAAC,GAAGhB,MAAM,CAACiB,UAAP,CAAkB,IAAlB,CAAR;AAEAD,IAAAA,CAAC,CAACE,QAAF,CAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B;AAEAF,IAAAA,CAAC,CAACG,IAAF,GAAS,YAAT;AAEA,QAAIC,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,GAAG,CAACC,MAAxB,EAAgCF,CAAC,EAAjC,EAAqC;AACjCD,MAAAA,WAAW,IAAII,GAAG,CAACC,WAAJ,CAAgBH,GAAG,CAACD,CAAD,CAAnB,EAAwBT,KAAvC;AACAY,MAAAA,GAAG,CAACE,QAAJ,CAAaJ,GAAG,CAACD,CAAD,CAAhB,EAAqBX,MAAM,CAACG,UAAP,GAAoB,CAApB,GAAyBO,WAA9C,EAA6DV,MAAM,CAACK,WAAP,GAAqB,CAAlF;AACH;AACJ;;AAED,SACI;AAAQ,IAAA,GAAG,EAAEX,SAAb;AAAwB,IAAA,EAAE,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH;;AAED,eAAeL,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction Game() {\r\n\r\n    const [canvas, setCanvas] = useState();\r\n    const [size, setSize] = useState();\r\n\r\n    let canvasRef = React.createRef();\r\n\r\n    useEffect(() => {\r\n        setCanvas(canvasRef.current);\r\n        console.log(\"Canvas:\", canvas)\r\n        resizeCanvas();//do an initial resize for when it first renders, this function will also be called every time the window is resized too\r\n    }, [canvasRef])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', resizeCanvas)\r\n    })\r\n\r\n    function resizeCanvas() {\r\n        if (canvas) {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n    }\r\n\r\n    if (canvas) {\r\n\r\n        let c = canvas.getContext(\"2d\");\r\n\r\n        c.fillRect(100, 100, 100, 100);\r\n\r\n        c.font = '30px Arial';\r\n\r\n        let totalOffset = 0;\r\n        for (let i = 0; i < txt.length; i++) {\r\n            totalOffset += ctx.measureText(txt[i]).width;\r\n            ctx.fillText(txt[i], window.innerWidth / 2 + (totalOffset),  window.innerHeight / 2);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <canvas ref={canvasRef} id=\"game\"></canvas>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}