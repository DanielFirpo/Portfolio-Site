{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DF\\\\Documents\\\\GitHub\\\\Lambda\\\\PortfolioSite\\\\portfolio\\\\src\\\\components\\\\Game.js\";\nimport React, { useEffect, useState } from 'react';\n\nfunction Game() {\n  const [canvas, setCanvas] = useState();\n  const [size, setSize] = useState();\n  let canvasRef = React.createRef();\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    console.log(\"Canvas:\", canvas);\n    resizeCanvas(); //do an initial resize for when it first renders, this function will also be called every time the window is resized too\n  }, [canvasRef]);\n  useEffect(() => {\n    window.addEventListener('resize', resizeCanvas);\n  });\n\n  function resizeCanvas() {\n    if (canvas) {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    }\n  }\n\n  if (canvas) {\n    let c = canvas.getContext(\"2d\");\n    c.fillRect(100, 100, 100, 100);\n    let fontSize = 30;\n    c.font = fontSize + 'px ' + 'TimesNewRoman';\n    c.lineWidth = 2;\n    c.textBaseline = 'middle';\n    c.textAlign = 'center';\n    let text = \"Helllllo world! ! !!! Spacing test\";\n    let totalOffset = 0;\n\n    for (let i = 0; i < text.length; i++) {\n      console.log(window.innerWidth / 2 + (totalOffset + c.measureText(text[i]).width / 2));\n      c.fillText(text[i], window.innerWidth / 2 + (totalOffset + c.measureText(text[0]).width / 2), window.innerHeight / 2);\n      totalOffset += c.measureText(text[i]).width;\n    }\n  }\n\n  return React.createElement(\"canvas\", {\n    ref: canvasRef,\n    id: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  });\n}\n\nexport default Game; //  // to count each character \n//  var charIndex = 0;\n//  // find the top ypos and then move down half a char space\n//  var yPos = centerY - fontSize * line.length * 0.5 * textVertSpacing + fontSize * textVertSpacing / 2;\n//  for (var i = 0; i < line.length; i++) {\n//    // get the width of the whole line\n//    var width = ctx.measureText(line[i]).width;\n//    // use the width to find start\n//    var textPosX = centerX - width / 2;\n//    for (var j = 0; j < line[i].length; j++) {\n//      // get char\n//      var char = line[i][j];\n//      // get its width\n//      var cWidth = ctx.measureText(char).width;\n//      // check if char needs to fade\n//      if (fade.indexOf(charIndex) > -1) {\n//        ctx.globalAlpha = 0.5;\n//      } else {\n//        ctx.globalAlpha = 1;\n//      }\n//      // draw the char offset by half its width (center)\n//      ctx.fillText(char, textPosX + cWidth / 2, yPos);\n//      // move too the next pos\n//      textPosX += cWidth;\n//      // count the char\n//      charIndex += 1\n//    }\n//    // move down one line\n//    yPos += fontSize * textVertSpacing;\n//  }\n// }","map":{"version":3,"sources":["C:/Users/DF/Documents/GitHub/Lambda/PortfolioSite/portfolio/src/components/Game.js"],"names":["React","useEffect","useState","Game","canvas","setCanvas","size","setSize","canvasRef","createRef","current","console","log","resizeCanvas","window","addEventListener","width","innerWidth","height","innerHeight","c","getContext","fillRect","fontSize","font","lineWidth","textBaseline","textAlign","text","totalOffset","i","length","measureText","fillText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,IAAT,GAAgB;AAEZ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,EAApC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AAEA,MAAIM,SAAS,GAAGR,KAAK,CAACS,SAAN,EAAhB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,SAAS,CAACG,SAAS,CAACE,OAAX,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,MAAvB;AACAS,IAAAA,YAAY,GAHA,CAGG;AAClB,GAJQ,EAIN,CAACL,SAAD,CAJM,CAAT;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACH,GAFQ,CAAT;;AAIA,WAASA,YAAT,GAAwB;AACpB,QAAIT,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACY,KAAP,GAAeF,MAAM,CAACG,UAAtB;AACAb,MAAAA,MAAM,CAACc,MAAP,GAAgBJ,MAAM,CAACK,WAAvB;AACH;AACJ;;AAED,MAAIf,MAAJ,EAAY;AAER,QAAIgB,CAAC,GAAGhB,MAAM,CAACiB,UAAP,CAAkB,IAAlB,CAAR;AAEAD,IAAAA,CAAC,CAACE,QAAF,CAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B;AAEA,QAAIC,QAAQ,GAAG,EAAf;AAEAH,IAAAA,CAAC,CAACI,IAAF,GAASD,QAAQ,GAAG,KAAX,GAAmB,eAA5B;AACAH,IAAAA,CAAC,CAACK,SAAF,GAAc,CAAd;AACAL,IAAAA,CAAC,CAACM,YAAF,GAAiB,QAAjB;AACAN,IAAAA,CAAC,CAACO,SAAF,GAAc,QAAd;AAEA,QAAIC,IAAI,GAAG,oCAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCnB,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACG,UAAP,GAAoB,CAApB,IAAyBY,WAAW,GAAGT,CAAC,CAACY,WAAF,CAAcJ,IAAI,CAACE,CAAD,CAAlB,EAAuBd,KAAvB,GAA+B,CAAtE,CAAZ;AACAI,MAAAA,CAAC,CAACa,QAAF,CAAWL,IAAI,CAACE,CAAD,CAAf,EAAoBhB,MAAM,CAACG,UAAP,GAAoB,CAApB,IAAyBY,WAAW,GAAGT,CAAC,CAACY,WAAF,CAAcJ,IAAI,CAAC,CAAD,CAAlB,EAAuBZ,KAAvB,GAA+B,CAAtE,CAApB,EAA+FF,MAAM,CAACK,WAAP,GAAqB,CAApH;AACAU,MAAAA,WAAW,IAAIT,CAAC,CAACY,WAAF,CAAcJ,IAAI,CAACE,CAAD,CAAlB,EAAuBd,KAAtC;AACH;AACJ;;AAED,SACI;AAAQ,IAAA,GAAG,EAAER,SAAb;AAAwB,IAAA,EAAE,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH;;AAED,eAAeL,IAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction Game() {\r\n\r\n    const [canvas, setCanvas] = useState();\r\n    const [size, setSize] = useState();\r\n\r\n    let canvasRef = React.createRef();\r\n\r\n    useEffect(() => {\r\n        setCanvas(canvasRef.current);\r\n        console.log(\"Canvas:\", canvas)\r\n        resizeCanvas();//do an initial resize for when it first renders, this function will also be called every time the window is resized too\r\n    }, [canvasRef])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', resizeCanvas)\r\n    })\r\n\r\n    function resizeCanvas() {\r\n        if (canvas) {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n    }\r\n\r\n    if (canvas) {\r\n\r\n        let c = canvas.getContext(\"2d\");\r\n\r\n        c.fillRect(100, 100, 100, 100);\r\n\r\n        let fontSize = 30\r\n\r\n        c.font = fontSize + 'px ' + 'TimesNewRoman';\r\n        c.lineWidth = 2;\r\n        c.textBaseline = 'middle';\r\n        c.textAlign = 'center';\r\n\r\n        let text = \"Helllllo world! ! !!! Spacing test\"\r\n        let totalOffset = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            console.log(window.innerWidth / 2 + (totalOffset + c.measureText(text[i]).width / 2))\r\n            c.fillText(text[i], window.innerWidth / 2 + (totalOffset + c.measureText(text[0]).width / 2),  window.innerHeight / 2);\r\n            totalOffset += c.measureText(text[i]).width;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <canvas ref={canvasRef} id=\"game\"></canvas>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n\r\n//  // to count each character \r\n//  var charIndex = 0;\r\n//  // find the top ypos and then move down half a char space\r\n//  var yPos = centerY - fontSize * line.length * 0.5 * textVertSpacing + fontSize * textVertSpacing / 2;\r\n \r\n//  for (var i = 0; i < line.length; i++) {\r\n//    // get the width of the whole line\r\n//    var width = ctx.measureText(line[i]).width;\r\n//    // use the width to find start\r\n//    var textPosX = centerX - width / 2;\r\n//    for (var j = 0; j < line[i].length; j++) {\r\n//      // get char\r\n//      var char = line[i][j];\r\n//      // get its width\r\n//      var cWidth = ctx.measureText(char).width;\r\n//      // check if char needs to fade\r\n//      if (fade.indexOf(charIndex) > -1) {\r\n//        ctx.globalAlpha = 0.5;\r\n//      } else {\r\n//        ctx.globalAlpha = 1;\r\n//      }\r\n//      // draw the char offset by half its width (center)\r\n//      ctx.fillText(char, textPosX + cWidth / 2, yPos);\r\n//      // move too the next pos\r\n//      textPosX += cWidth;\r\n//      // count the char\r\n//      charIndex += 1\r\n//    }\r\n//    // move down one line\r\n//    yPos += fontSize * textVertSpacing;\r\n//  }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}